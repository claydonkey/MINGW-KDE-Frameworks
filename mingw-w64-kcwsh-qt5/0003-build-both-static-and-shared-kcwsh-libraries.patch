From ff2961277b6c418be325b0015f3c080fd646bed7 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Mon, 6 Apr 2015 12:47:55 +0100
Subject: [PATCH 3/3] build both static and shared kcwsh libraries.

There used to be a comment stating:
"kcwsh library always needs to be shared"

.. so I'm not sure about the implications of changing
this.

Currently, cmake/KcwSHConfig.cmake hardcodes to use the
static library only:

set(KCWSH_LIBRARIES ${KCW_LIBRARIES} kcwsh_STATIC)
---
 CMakeLists.txt          | 43 +++++++++++++++++++++++++++++++------------
 cmake/KcwSHConfig.cmake |  2 +-
 2 files changed, 32 insertions(+), 13 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index dc0ba42..f528609 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,7 @@
 project(kcwsh)
 
 cmake_minimum_required(VERSION 2.8.12)
+include(GenerateExportHeader)
 
 option(BUILD_GUI_TEST "build a gui app for testing purposes" ON)
 option(BUILD_TESTS "build unittests" ON)
@@ -74,19 +75,37 @@ set(kcwsh_SRCS
 )
 
 include_directories(${CMAKE_CURRENT_SOURCE_DIR})
-# kcwsh library always needs to be shared
-add_library(kcwsh SHARED ${kcwsh_SRCS})
-target_link_libraries(kcwsh ${KCW_LIBRARIES})
-set_target_properties(kcwsh PROPERTIES PREFIX "" AUTOMOC OFF)
-
-install(TARGETS kcwsh EXPORT KcwSHTargets
-                      RUNTIME DESTINATION bin
-                      LIBRARY DESTINATION bin
-                      ARCHIVE DESTINATION lib)
-install(FILES ${kcwsh_HDRS} DESTINATION include/kcwsh)
 
-export(TARGETS kcwsh FILE "${CMAKE_CURRENT_BINARY_DIR}/KcwSHTargets.cmake")
-export(PACKAGE kcwsh)
+foreach(library_type STATIC SHARED)
+  add_library(kcwsh_${library_type} ${library_type} ${kcwsh_SRCS})
+  set_target_properties(kcwsh_${library_type} PROPERTIES OUTPUT_NAME kcwsh)
+  generate_export_header(kcwsh_${library_type}
+                         BASE_NAME kcwsh
+                         EXPORT_FILE_NAME kcwsh_export.h)
+  # http://www.cmake.org/cmake/help/v3.0/module/GenerateExportHeader.html
+  # "If the same sources are used to create both a shared and a static library, the
+  #  uppercased symbol ${BASE_NAME}_STATIC_DEFINE should be used when building the
+  #  static library"
+  if(library_type STREQUAL "STATIC")
+    set_target_properties(kcwsh_${library_type} PROPERTIES
+                          COMPILE_FLAGS -DKCWSH_STATIC_DEFINE)
+    # .. and the consumers of the static library need to also define this .. is there
+    # no better way than this? It's verbose and brittle.
+    set_target_properties(kcwsh_${library_type} PROPERTIES
+                          INTERFACE_COMPILE_DEFINITIONS KCWSH_STATIC_DEFINE)
+    target_link_libraries(kcwsh_STATIC ${KCW_LIBRARIES})
+  endif()
+  set_target_properties(kcwsh_${library_type} PROPERTIES PREFIX "" AUTOMOC OFF)
+  install(TARGETS kcwsh_${library_type} EXPORT KcwSHTargets
+                                        RUNTIME DESTINATION bin
+                                        LIBRARY DESTINATION bin
+                                        ARCHIVE DESTINATION lib)
+
+  export(TARGETS kcwsh_${library_type} FILE "${CMAKE_CURRENT_BINARY_DIR}/KcwSHTargets.cmake")
+  export(PACKAGE kcwsh_${library_type})
+endforeach(library_type)
+
+install(FILES ${kcwsh_HDRS} DESTINATION include/kcwsh)
 
 install(EXPORT KcwSHTargets DESTINATION lib/cmake/kcwsh COMPONENT devel)
 
diff --git a/cmake/KcwSHConfig.cmake b/cmake/KcwSHConfig.cmake
index ee368ad..33c5a16 100644
--- a/cmake/KcwSHConfig.cmake
+++ b/cmake/KcwSHConfig.cmake
@@ -12,4 +12,4 @@ endif()
 find_package(Kcw REQUIRED)
 
 set(KCWSH_INCLUDE_DIRS ${KCW_INCLUDE_DIRS} ${KCWSH_CMAKE_DIR}/../../../include/kcwsh)
-set(KCWSH_LIBRARIES ${KCW_LIBRARIES} kcwsh)
+set(KCWSH_LIBRARIES ${KCW_LIBRARIES} kcwsh_STATIC)
-- 
2.3.5

